# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyainl16', [dirname(__file__)])
        except ImportError:
            import _pyainl16
            return _pyainl16
        if fp is not None:
            try:
                _mod = imp.load_module('_pyainl16', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyainl16 = swig_import_helper()
    del swig_import_helper
else:
    import _pyainl16
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyainl16.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _pyainl16.SwigPyIterator_value(self)
    def incr(self, n=1): return _pyainl16.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _pyainl16.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _pyainl16.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _pyainl16.SwigPyIterator_equal(self, *args)
    def copy(self): return _pyainl16.SwigPyIterator_copy(self)
    def next(self): return _pyainl16.SwigPyIterator_next(self)
    def __next__(self): return _pyainl16.SwigPyIterator___next__(self)
    def previous(self): return _pyainl16.SwigPyIterator_previous(self)
    def advance(self, *args): return _pyainl16.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _pyainl16.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _pyainl16.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _pyainl16.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _pyainl16.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _pyainl16.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _pyainl16.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _pyainl16.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class GameEndsPlayerVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameEndsPlayerVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GameEndsPlayerVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyainl16.GameEndsPlayerVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyainl16.GameEndsPlayerVector___nonzero__(self)
    def __bool__(self): return _pyainl16.GameEndsPlayerVector___bool__(self)
    def __len__(self): return _pyainl16.GameEndsPlayerVector___len__(self)
    def pop(self): return _pyainl16.GameEndsPlayerVector_pop(self)
    def __getslice__(self, *args): return _pyainl16.GameEndsPlayerVector___getslice__(self, *args)
    def __setslice__(self, *args): return _pyainl16.GameEndsPlayerVector___setslice__(self, *args)
    def __delslice__(self, *args): return _pyainl16.GameEndsPlayerVector___delslice__(self, *args)
    def __delitem__(self, *args): return _pyainl16.GameEndsPlayerVector___delitem__(self, *args)
    def __getitem__(self, *args): return _pyainl16.GameEndsPlayerVector___getitem__(self, *args)
    def __setitem__(self, *args): return _pyainl16.GameEndsPlayerVector___setitem__(self, *args)
    def append(self, *args): return _pyainl16.GameEndsPlayerVector_append(self, *args)
    def empty(self): return _pyainl16.GameEndsPlayerVector_empty(self)
    def size(self): return _pyainl16.GameEndsPlayerVector_size(self)
    def clear(self): return _pyainl16.GameEndsPlayerVector_clear(self)
    def swap(self, *args): return _pyainl16.GameEndsPlayerVector_swap(self, *args)
    def get_allocator(self): return _pyainl16.GameEndsPlayerVector_get_allocator(self)
    def begin(self): return _pyainl16.GameEndsPlayerVector_begin(self)
    def end(self): return _pyainl16.GameEndsPlayerVector_end(self)
    def rbegin(self): return _pyainl16.GameEndsPlayerVector_rbegin(self)
    def rend(self): return _pyainl16.GameEndsPlayerVector_rend(self)
    def pop_back(self): return _pyainl16.GameEndsPlayerVector_pop_back(self)
    def erase(self, *args): return _pyainl16.GameEndsPlayerVector_erase(self, *args)
    def __init__(self, *args): 
        this = _pyainl16.new_GameEndsPlayerVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyainl16.GameEndsPlayerVector_push_back(self, *args)
    def front(self): return _pyainl16.GameEndsPlayerVector_front(self)
    def back(self): return _pyainl16.GameEndsPlayerVector_back(self)
    def assign(self, *args): return _pyainl16.GameEndsPlayerVector_assign(self, *args)
    def resize(self, *args): return _pyainl16.GameEndsPlayerVector_resize(self, *args)
    def insert(self, *args): return _pyainl16.GameEndsPlayerVector_insert(self, *args)
    def reserve(self, *args): return _pyainl16.GameEndsPlayerVector_reserve(self, *args)
    def capacity(self): return _pyainl16.GameEndsPlayerVector_capacity(self)
    __swig_destroy__ = _pyainl16.delete_GameEndsPlayerVector
    __del__ = lambda self : None;
GameEndsPlayerVector_swigregister = _pyainl16.GameEndsPlayerVector_swigregister
GameEndsPlayerVector_swigregister(GameEndsPlayerVector)

class PositionVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PositionVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PositionVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyainl16.PositionVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyainl16.PositionVector___nonzero__(self)
    def __bool__(self): return _pyainl16.PositionVector___bool__(self)
    def __len__(self): return _pyainl16.PositionVector___len__(self)
    def pop(self): return _pyainl16.PositionVector_pop(self)
    def __getslice__(self, *args): return _pyainl16.PositionVector___getslice__(self, *args)
    def __setslice__(self, *args): return _pyainl16.PositionVector___setslice__(self, *args)
    def __delslice__(self, *args): return _pyainl16.PositionVector___delslice__(self, *args)
    def __delitem__(self, *args): return _pyainl16.PositionVector___delitem__(self, *args)
    def __getitem__(self, *args): return _pyainl16.PositionVector___getitem__(self, *args)
    def __setitem__(self, *args): return _pyainl16.PositionVector___setitem__(self, *args)
    def append(self, *args): return _pyainl16.PositionVector_append(self, *args)
    def empty(self): return _pyainl16.PositionVector_empty(self)
    def size(self): return _pyainl16.PositionVector_size(self)
    def clear(self): return _pyainl16.PositionVector_clear(self)
    def swap(self, *args): return _pyainl16.PositionVector_swap(self, *args)
    def get_allocator(self): return _pyainl16.PositionVector_get_allocator(self)
    def begin(self): return _pyainl16.PositionVector_begin(self)
    def end(self): return _pyainl16.PositionVector_end(self)
    def rbegin(self): return _pyainl16.PositionVector_rbegin(self)
    def rend(self): return _pyainl16.PositionVector_rend(self)
    def pop_back(self): return _pyainl16.PositionVector_pop_back(self)
    def erase(self, *args): return _pyainl16.PositionVector_erase(self, *args)
    def __init__(self, *args): 
        this = _pyainl16.new_PositionVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyainl16.PositionVector_push_back(self, *args)
    def front(self): return _pyainl16.PositionVector_front(self)
    def back(self): return _pyainl16.PositionVector_back(self)
    def assign(self, *args): return _pyainl16.PositionVector_assign(self, *args)
    def resize(self, *args): return _pyainl16.PositionVector_resize(self, *args)
    def insert(self, *args): return _pyainl16.PositionVector_insert(self, *args)
    def reserve(self, *args): return _pyainl16.PositionVector_reserve(self, *args)
    def capacity(self): return _pyainl16.PositionVector_capacity(self)
    __swig_destroy__ = _pyainl16.delete_PositionVector
    __del__ = lambda self : None;
PositionVector_swigregister = _pyainl16.PositionVector_swigregister
PositionVector_swigregister(PositionVector)

class VirusVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirusVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VirusVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyainl16.VirusVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyainl16.VirusVector___nonzero__(self)
    def __bool__(self): return _pyainl16.VirusVector___bool__(self)
    def __len__(self): return _pyainl16.VirusVector___len__(self)
    def pop(self): return _pyainl16.VirusVector_pop(self)
    def __getslice__(self, *args): return _pyainl16.VirusVector___getslice__(self, *args)
    def __setslice__(self, *args): return _pyainl16.VirusVector___setslice__(self, *args)
    def __delslice__(self, *args): return _pyainl16.VirusVector___delslice__(self, *args)
    def __delitem__(self, *args): return _pyainl16.VirusVector___delitem__(self, *args)
    def __getitem__(self, *args): return _pyainl16.VirusVector___getitem__(self, *args)
    def __setitem__(self, *args): return _pyainl16.VirusVector___setitem__(self, *args)
    def append(self, *args): return _pyainl16.VirusVector_append(self, *args)
    def empty(self): return _pyainl16.VirusVector_empty(self)
    def size(self): return _pyainl16.VirusVector_size(self)
    def clear(self): return _pyainl16.VirusVector_clear(self)
    def swap(self, *args): return _pyainl16.VirusVector_swap(self, *args)
    def get_allocator(self): return _pyainl16.VirusVector_get_allocator(self)
    def begin(self): return _pyainl16.VirusVector_begin(self)
    def end(self): return _pyainl16.VirusVector_end(self)
    def rbegin(self): return _pyainl16.VirusVector_rbegin(self)
    def rend(self): return _pyainl16.VirusVector_rend(self)
    def pop_back(self): return _pyainl16.VirusVector_pop_back(self)
    def erase(self, *args): return _pyainl16.VirusVector_erase(self, *args)
    def __init__(self, *args): 
        this = _pyainl16.new_VirusVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyainl16.VirusVector_push_back(self, *args)
    def front(self): return _pyainl16.VirusVector_front(self)
    def back(self): return _pyainl16.VirusVector_back(self)
    def assign(self, *args): return _pyainl16.VirusVector_assign(self, *args)
    def resize(self, *args): return _pyainl16.VirusVector_resize(self, *args)
    def insert(self, *args): return _pyainl16.VirusVector_insert(self, *args)
    def reserve(self, *args): return _pyainl16.VirusVector_reserve(self, *args)
    def capacity(self): return _pyainl16.VirusVector_capacity(self)
    __swig_destroy__ = _pyainl16.delete_VirusVector
    __del__ = lambda self : None;
VirusVector_swigregister = _pyainl16.VirusVector_swigregister
VirusVector_swigregister(VirusVector)

class PlayerCellVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlayerCellVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PlayerCellVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyainl16.PlayerCellVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyainl16.PlayerCellVector___nonzero__(self)
    def __bool__(self): return _pyainl16.PlayerCellVector___bool__(self)
    def __len__(self): return _pyainl16.PlayerCellVector___len__(self)
    def pop(self): return _pyainl16.PlayerCellVector_pop(self)
    def __getslice__(self, *args): return _pyainl16.PlayerCellVector___getslice__(self, *args)
    def __setslice__(self, *args): return _pyainl16.PlayerCellVector___setslice__(self, *args)
    def __delslice__(self, *args): return _pyainl16.PlayerCellVector___delslice__(self, *args)
    def __delitem__(self, *args): return _pyainl16.PlayerCellVector___delitem__(self, *args)
    def __getitem__(self, *args): return _pyainl16.PlayerCellVector___getitem__(self, *args)
    def __setitem__(self, *args): return _pyainl16.PlayerCellVector___setitem__(self, *args)
    def append(self, *args): return _pyainl16.PlayerCellVector_append(self, *args)
    def empty(self): return _pyainl16.PlayerCellVector_empty(self)
    def size(self): return _pyainl16.PlayerCellVector_size(self)
    def clear(self): return _pyainl16.PlayerCellVector_clear(self)
    def swap(self, *args): return _pyainl16.PlayerCellVector_swap(self, *args)
    def get_allocator(self): return _pyainl16.PlayerCellVector_get_allocator(self)
    def begin(self): return _pyainl16.PlayerCellVector_begin(self)
    def end(self): return _pyainl16.PlayerCellVector_end(self)
    def rbegin(self): return _pyainl16.PlayerCellVector_rbegin(self)
    def rend(self): return _pyainl16.PlayerCellVector_rend(self)
    def pop_back(self): return _pyainl16.PlayerCellVector_pop_back(self)
    def erase(self, *args): return _pyainl16.PlayerCellVector_erase(self, *args)
    def __init__(self, *args): 
        this = _pyainl16.new_PlayerCellVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyainl16.PlayerCellVector_push_back(self, *args)
    def front(self): return _pyainl16.PlayerCellVector_front(self)
    def back(self): return _pyainl16.PlayerCellVector_back(self)
    def assign(self, *args): return _pyainl16.PlayerCellVector_assign(self, *args)
    def resize(self, *args): return _pyainl16.PlayerCellVector_resize(self, *args)
    def insert(self, *args): return _pyainl16.PlayerCellVector_insert(self, *args)
    def reserve(self, *args): return _pyainl16.PlayerCellVector_reserve(self, *args)
    def capacity(self): return _pyainl16.PlayerCellVector_capacity(self)
    __swig_destroy__ = _pyainl16.delete_PlayerCellVector
    __del__ = lambda self : None;
PlayerCellVector_swigregister = _pyainl16.PlayerCellVector_swigregister
PlayerCellVector_swigregister(PlayerCellVector)

class PlayerVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlayerVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PlayerVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyainl16.PlayerVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyainl16.PlayerVector___nonzero__(self)
    def __bool__(self): return _pyainl16.PlayerVector___bool__(self)
    def __len__(self): return _pyainl16.PlayerVector___len__(self)
    def pop(self): return _pyainl16.PlayerVector_pop(self)
    def __getslice__(self, *args): return _pyainl16.PlayerVector___getslice__(self, *args)
    def __setslice__(self, *args): return _pyainl16.PlayerVector___setslice__(self, *args)
    def __delslice__(self, *args): return _pyainl16.PlayerVector___delslice__(self, *args)
    def __delitem__(self, *args): return _pyainl16.PlayerVector___delitem__(self, *args)
    def __getitem__(self, *args): return _pyainl16.PlayerVector___getitem__(self, *args)
    def __setitem__(self, *args): return _pyainl16.PlayerVector___setitem__(self, *args)
    def append(self, *args): return _pyainl16.PlayerVector_append(self, *args)
    def empty(self): return _pyainl16.PlayerVector_empty(self)
    def size(self): return _pyainl16.PlayerVector_size(self)
    def clear(self): return _pyainl16.PlayerVector_clear(self)
    def swap(self, *args): return _pyainl16.PlayerVector_swap(self, *args)
    def get_allocator(self): return _pyainl16.PlayerVector_get_allocator(self)
    def begin(self): return _pyainl16.PlayerVector_begin(self)
    def end(self): return _pyainl16.PlayerVector_end(self)
    def rbegin(self): return _pyainl16.PlayerVector_rbegin(self)
    def rend(self): return _pyainl16.PlayerVector_rend(self)
    def pop_back(self): return _pyainl16.PlayerVector_pop_back(self)
    def erase(self, *args): return _pyainl16.PlayerVector_erase(self, *args)
    def __init__(self, *args): 
        this = _pyainl16.new_PlayerVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyainl16.PlayerVector_push_back(self, *args)
    def front(self): return _pyainl16.PlayerVector_front(self)
    def back(self): return _pyainl16.PlayerVector_back(self)
    def assign(self, *args): return _pyainl16.PlayerVector_assign(self, *args)
    def resize(self, *args): return _pyainl16.PlayerVector_resize(self, *args)
    def insert(self, *args): return _pyainl16.PlayerVector_insert(self, *args)
    def reserve(self, *args): return _pyainl16.PlayerVector_reserve(self, *args)
    def capacity(self): return _pyainl16.PlayerVector_capacity(self)
    __swig_destroy__ = _pyainl16.delete_PlayerVector
    __del__ = lambda self : None;
PlayerVector_swigregister = _pyainl16.PlayerVector_swigregister
PlayerVector_swigregister(PlayerVector)

class NeutralCellVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NeutralCellVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NeutralCellVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyainl16.NeutralCellVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyainl16.NeutralCellVector___nonzero__(self)
    def __bool__(self): return _pyainl16.NeutralCellVector___bool__(self)
    def __len__(self): return _pyainl16.NeutralCellVector___len__(self)
    def pop(self): return _pyainl16.NeutralCellVector_pop(self)
    def __getslice__(self, *args): return _pyainl16.NeutralCellVector___getslice__(self, *args)
    def __setslice__(self, *args): return _pyainl16.NeutralCellVector___setslice__(self, *args)
    def __delslice__(self, *args): return _pyainl16.NeutralCellVector___delslice__(self, *args)
    def __delitem__(self, *args): return _pyainl16.NeutralCellVector___delitem__(self, *args)
    def __getitem__(self, *args): return _pyainl16.NeutralCellVector___getitem__(self, *args)
    def __setitem__(self, *args): return _pyainl16.NeutralCellVector___setitem__(self, *args)
    def append(self, *args): return _pyainl16.NeutralCellVector_append(self, *args)
    def empty(self): return _pyainl16.NeutralCellVector_empty(self)
    def size(self): return _pyainl16.NeutralCellVector_size(self)
    def clear(self): return _pyainl16.NeutralCellVector_clear(self)
    def swap(self, *args): return _pyainl16.NeutralCellVector_swap(self, *args)
    def get_allocator(self): return _pyainl16.NeutralCellVector_get_allocator(self)
    def begin(self): return _pyainl16.NeutralCellVector_begin(self)
    def end(self): return _pyainl16.NeutralCellVector_end(self)
    def rbegin(self): return _pyainl16.NeutralCellVector_rbegin(self)
    def rend(self): return _pyainl16.NeutralCellVector_rend(self)
    def pop_back(self): return _pyainl16.NeutralCellVector_pop_back(self)
    def erase(self, *args): return _pyainl16.NeutralCellVector_erase(self, *args)
    def __init__(self, *args): 
        this = _pyainl16.new_NeutralCellVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyainl16.NeutralCellVector_push_back(self, *args)
    def front(self): return _pyainl16.NeutralCellVector_front(self)
    def back(self): return _pyainl16.NeutralCellVector_back(self)
    def assign(self, *args): return _pyainl16.NeutralCellVector_assign(self, *args)
    def resize(self, *args): return _pyainl16.NeutralCellVector_resize(self, *args)
    def insert(self, *args): return _pyainl16.NeutralCellVector_insert(self, *args)
    def reserve(self, *args): return _pyainl16.NeutralCellVector_reserve(self, *args)
    def capacity(self): return _pyainl16.NeutralCellVector_capacity(self)
    __swig_destroy__ = _pyainl16.delete_NeutralCellVector
    __del__ = lambda self : None;
NeutralCellVector_swigregister = _pyainl16.NeutralCellVector_swigregister
NeutralCellVector_swigregister(NeutralCellVector)

class GameEndsPlayer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameEndsPlayer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GameEndsPlayer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["player_id"] = _pyainl16.GameEndsPlayer_player_id_set
    __swig_getmethods__["player_id"] = _pyainl16.GameEndsPlayer_player_id_get
    if _newclass:player_id = _swig_property(_pyainl16.GameEndsPlayer_player_id_get, _pyainl16.GameEndsPlayer_player_id_set)
    __swig_setmethods__["name"] = _pyainl16.GameEndsPlayer_name_set
    __swig_getmethods__["name"] = _pyainl16.GameEndsPlayer_name_get
    if _newclass:name = _swig_property(_pyainl16.GameEndsPlayer_name_get, _pyainl16.GameEndsPlayer_name_set)
    __swig_setmethods__["score"] = _pyainl16.GameEndsPlayer_score_set
    __swig_getmethods__["score"] = _pyainl16.GameEndsPlayer_score_get
    if _newclass:score = _swig_property(_pyainl16.GameEndsPlayer_score_get, _pyainl16.GameEndsPlayer_score_set)
    def __init__(self): 
        this = _pyainl16.new_GameEndsPlayer()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyainl16.delete_GameEndsPlayer
    __del__ = lambda self : None;
GameEndsPlayer_swigregister = _pyainl16.GameEndsPlayer_swigregister
GameEndsPlayer_swigregister(GameEndsPlayer)

class AINetException(Exception):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AINetException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AINetException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyainl16.new_AINetException(*args)
        try: self.this.append(this)
        except: self.this = this
    def what(self): return _pyainl16.AINetException_what(self)
    __swig_destroy__ = _pyainl16.delete_AINetException
    __del__ = lambda self : None;
AINetException_swigregister = _pyainl16.AINetException_swigregister
AINetException_swigregister(AINetException)

class DisconnectedException(AINetException):
    __swig_setmethods__ = {}
    for _s in [AINetException]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DisconnectedException, name, value)
    __swig_getmethods__ = {}
    for _s in [AINetException]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DisconnectedException, name)
    __repr__ = _swig_repr
    def __init__(self, what="Disconnected"): 
        this = _pyainl16.new_DisconnectedException(what)
        try: self.this.append(this)
        except: self.this = this
    def what(self): return _pyainl16.DisconnectedException_what(self)
    __swig_destroy__ = _pyainl16.delete_DisconnectedException
    __del__ = lambda self : None;
DisconnectedException_swigregister = _pyainl16.DisconnectedException_swigregister
DisconnectedException_swigregister(DisconnectedException)

class KickException(AINetException):
    __swig_setmethods__ = {}
    for _s in [AINetException]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KickException, name, value)
    __swig_getmethods__ = {}
    for _s in [AINetException]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KickException, name)
    __repr__ = _swig_repr
    def __init__(self, what="Kicked"): 
        this = _pyainl16.new_KickException(what)
        try: self.this.append(this)
        except: self.this = this
    def what(self): return _pyainl16.KickException_what(self)
    __swig_destroy__ = _pyainl16.delete_KickException
    __del__ = lambda self : None;
KickException_swigregister = _pyainl16.KickException_swigregister
KickException_swigregister(KickException)

class SocketErrorException(AINetException):
    __swig_setmethods__ = {}
    for _s in [AINetException]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SocketErrorException, name, value)
    __swig_getmethods__ = {}
    for _s in [AINetException]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SocketErrorException, name)
    __repr__ = _swig_repr
    def __init__(self, what="Socket error"): 
        this = _pyainl16.new_SocketErrorException(what)
        try: self.this.append(this)
        except: self.this = this
    def what(self): return _pyainl16.SocketErrorException_what(self)
    __swig_destroy__ = _pyainl16.delete_SocketErrorException
    __del__ = lambda self : None;
SocketErrorException_swigregister = _pyainl16.SocketErrorException_swigregister
SocketErrorException_swigregister(SocketErrorException)

class Position(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Position, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Position, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _pyainl16.Position_x_set
    __swig_getmethods__["x"] = _pyainl16.Position_x_get
    if _newclass:x = _swig_property(_pyainl16.Position_x_get, _pyainl16.Position_x_set)
    __swig_setmethods__["y"] = _pyainl16.Position_y_set
    __swig_getmethods__["y"] = _pyainl16.Position_y_get
    if _newclass:y = _swig_property(_pyainl16.Position_y_get, _pyainl16.Position_y_set)
    def __repr__(self):
        return '{{x:{}, y:{}}}'.format(self.x, self.y)

    def __init__(self): 
        this = _pyainl16.new_Position()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyainl16.delete_Position
    __del__ = lambda self : None;
Position_swigregister = _pyainl16.Position_swigregister
Position_swigregister(Position)

class Actions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Actions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Actions, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyainl16.new_Actions()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyainl16.delete_Actions
    __del__ = lambda self : None;
    def clear(self): return _pyainl16.Actions_clear(self)
    def add_move_action(self, *args): return _pyainl16.Actions_add_move_action(self, *args)
    def add_divide_action(self, *args): return _pyainl16.Actions_add_divide_action(self, *args)
    def add_create_virus_action(self, *args): return _pyainl16.Actions_add_create_virus_action(self, *args)
    def add_surrender_action(self): return _pyainl16.Actions_add_surrender_action(self)
Actions_swigregister = _pyainl16.Actions_swigregister
Actions_swigregister(Actions)

class GameParameters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GameParameters, name)
    __repr__ = _swig_repr
    __swig_setmethods__["map_width"] = _pyainl16.GameParameters_map_width_set
    __swig_getmethods__["map_width"] = _pyainl16.GameParameters_map_width_get
    if _newclass:map_width = _swig_property(_pyainl16.GameParameters_map_width_get, _pyainl16.GameParameters_map_width_set)
    __swig_setmethods__["map_height"] = _pyainl16.GameParameters_map_height_set
    __swig_getmethods__["map_height"] = _pyainl16.GameParameters_map_height_get
    if _newclass:map_height = _swig_property(_pyainl16.GameParameters_map_height_get, _pyainl16.GameParameters_map_height_set)
    __swig_setmethods__["min_nb_players"] = _pyainl16.GameParameters_min_nb_players_set
    __swig_getmethods__["min_nb_players"] = _pyainl16.GameParameters_min_nb_players_get
    if _newclass:min_nb_players = _swig_property(_pyainl16.GameParameters_min_nb_players_get, _pyainl16.GameParameters_min_nb_players_set)
    __swig_setmethods__["max_nb_players"] = _pyainl16.GameParameters_max_nb_players_set
    __swig_getmethods__["max_nb_players"] = _pyainl16.GameParameters_max_nb_players_get
    if _newclass:max_nb_players = _swig_property(_pyainl16.GameParameters_max_nb_players_get, _pyainl16.GameParameters_max_nb_players_set)
    __swig_setmethods__["mass_absorption"] = _pyainl16.GameParameters_mass_absorption_set
    __swig_getmethods__["mass_absorption"] = _pyainl16.GameParameters_mass_absorption_get
    if _newclass:mass_absorption = _swig_property(_pyainl16.GameParameters_mass_absorption_get, _pyainl16.GameParameters_mass_absorption_set)
    __swig_setmethods__["minimum_mass_ratio_to_absorb"] = _pyainl16.GameParameters_minimum_mass_ratio_to_absorb_set
    __swig_getmethods__["minimum_mass_ratio_to_absorb"] = _pyainl16.GameParameters_minimum_mass_ratio_to_absorb_get
    if _newclass:minimum_mass_ratio_to_absorb = _swig_property(_pyainl16.GameParameters_minimum_mass_ratio_to_absorb_get, _pyainl16.GameParameters_minimum_mass_ratio_to_absorb_set)
    __swig_setmethods__["minimum_pcell_mass"] = _pyainl16.GameParameters_minimum_pcell_mass_set
    __swig_getmethods__["minimum_pcell_mass"] = _pyainl16.GameParameters_minimum_pcell_mass_get
    if _newclass:minimum_pcell_mass = _swig_property(_pyainl16.GameParameters_minimum_pcell_mass_get, _pyainl16.GameParameters_minimum_pcell_mass_set)
    __swig_setmethods__["maximum_pcell_mass"] = _pyainl16.GameParameters_maximum_pcell_mass_set
    __swig_getmethods__["maximum_pcell_mass"] = _pyainl16.GameParameters_maximum_pcell_mass_get
    if _newclass:maximum_pcell_mass = _swig_property(_pyainl16.GameParameters_maximum_pcell_mass_get, _pyainl16.GameParameters_maximum_pcell_mass_set)
    __swig_setmethods__["radius_factor"] = _pyainl16.GameParameters_radius_factor_set
    __swig_getmethods__["radius_factor"] = _pyainl16.GameParameters_radius_factor_get
    if _newclass:radius_factor = _swig_property(_pyainl16.GameParameters_radius_factor_get, _pyainl16.GameParameters_radius_factor_set)
    __swig_setmethods__["max_cells_per_player"] = _pyainl16.GameParameters_max_cells_per_player_set
    __swig_getmethods__["max_cells_per_player"] = _pyainl16.GameParameters_max_cells_per_player_get
    if _newclass:max_cells_per_player = _swig_property(_pyainl16.GameParameters_max_cells_per_player_get, _pyainl16.GameParameters_max_cells_per_player_set)
    __swig_setmethods__["mass_loss_per_frame"] = _pyainl16.GameParameters_mass_loss_per_frame_set
    __swig_getmethods__["mass_loss_per_frame"] = _pyainl16.GameParameters_mass_loss_per_frame_get
    if _newclass:mass_loss_per_frame = _swig_property(_pyainl16.GameParameters_mass_loss_per_frame_get, _pyainl16.GameParameters_mass_loss_per_frame_set)
    __swig_setmethods__["base_cell_speed"] = _pyainl16.GameParameters_base_cell_speed_set
    __swig_getmethods__["base_cell_speed"] = _pyainl16.GameParameters_base_cell_speed_get
    if _newclass:base_cell_speed = _swig_property(_pyainl16.GameParameters_base_cell_speed_get, _pyainl16.GameParameters_base_cell_speed_set)
    __swig_setmethods__["speed_loss_factor"] = _pyainl16.GameParameters_speed_loss_factor_set
    __swig_getmethods__["speed_loss_factor"] = _pyainl16.GameParameters_speed_loss_factor_get
    if _newclass:speed_loss_factor = _swig_property(_pyainl16.GameParameters_speed_loss_factor_get, _pyainl16.GameParameters_speed_loss_factor_set)
    __swig_setmethods__["virus_mass"] = _pyainl16.GameParameters_virus_mass_set
    __swig_getmethods__["virus_mass"] = _pyainl16.GameParameters_virus_mass_get
    if _newclass:virus_mass = _swig_property(_pyainl16.GameParameters_virus_mass_get, _pyainl16.GameParameters_virus_mass_set)
    __swig_setmethods__["virus_creation_mass_loss"] = _pyainl16.GameParameters_virus_creation_mass_loss_set
    __swig_getmethods__["virus_creation_mass_loss"] = _pyainl16.GameParameters_virus_creation_mass_loss_get
    if _newclass:virus_creation_mass_loss = _swig_property(_pyainl16.GameParameters_virus_creation_mass_loss_get, _pyainl16.GameParameters_virus_creation_mass_loss_set)
    __swig_setmethods__["virus_max_split"] = _pyainl16.GameParameters_virus_max_split_set
    __swig_getmethods__["virus_max_split"] = _pyainl16.GameParameters_virus_max_split_get
    if _newclass:virus_max_split = _swig_property(_pyainl16.GameParameters_virus_max_split_get, _pyainl16.GameParameters_virus_max_split_set)
    __swig_setmethods__["nb_starting_cells_per_player"] = _pyainl16.GameParameters_nb_starting_cells_per_player_set
    __swig_getmethods__["nb_starting_cells_per_player"] = _pyainl16.GameParameters_nb_starting_cells_per_player_get
    if _newclass:nb_starting_cells_per_player = _swig_property(_pyainl16.GameParameters_nb_starting_cells_per_player_get, _pyainl16.GameParameters_nb_starting_cells_per_player_set)
    __swig_setmethods__["player_cells_starting_mass"] = _pyainl16.GameParameters_player_cells_starting_mass_set
    __swig_getmethods__["player_cells_starting_mass"] = _pyainl16.GameParameters_player_cells_starting_mass_get
    if _newclass:player_cells_starting_mass = _swig_property(_pyainl16.GameParameters_player_cells_starting_mass_get, _pyainl16.GameParameters_player_cells_starting_mass_set)
    __swig_setmethods__["initial_neutral_cells_mass"] = _pyainl16.GameParameters_initial_neutral_cells_mass_set
    __swig_getmethods__["initial_neutral_cells_mass"] = _pyainl16.GameParameters_initial_neutral_cells_mass_get
    if _newclass:initial_neutral_cells_mass = _swig_property(_pyainl16.GameParameters_initial_neutral_cells_mass_get, _pyainl16.GameParameters_initial_neutral_cells_mass_set)
    __swig_setmethods__["initial_neutral_cells_repop_time"] = _pyainl16.GameParameters_initial_neutral_cells_repop_time_set
    __swig_getmethods__["initial_neutral_cells_repop_time"] = _pyainl16.GameParameters_initial_neutral_cells_repop_time_get
    if _newclass:initial_neutral_cells_repop_time = _swig_property(_pyainl16.GameParameters_initial_neutral_cells_repop_time_get, _pyainl16.GameParameters_initial_neutral_cells_repop_time_set)
    __swig_setmethods__["nb_turns"] = _pyainl16.GameParameters_nb_turns_set
    __swig_getmethods__["nb_turns"] = _pyainl16.GameParameters_nb_turns_get
    if _newclass:nb_turns = _swig_property(_pyainl16.GameParameters_nb_turns_get, _pyainl16.GameParameters_nb_turns_set)
    def __init__(self): 
        this = _pyainl16.new_GameParameters()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyainl16.delete_GameParameters
    __del__ = lambda self : None;
GameParameters_swigregister = _pyainl16.GameParameters_swigregister
GameParameters_swigregister(GameParameters)

class Welcome(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Welcome, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Welcome, name)
    __repr__ = _swig_repr
    __swig_setmethods__["parameters"] = _pyainl16.Welcome_parameters_set
    __swig_getmethods__["parameters"] = _pyainl16.Welcome_parameters_get
    if _newclass:parameters = _swig_property(_pyainl16.Welcome_parameters_get, _pyainl16.Welcome_parameters_set)
    __swig_setmethods__["initial_ncells_positions"] = _pyainl16.Welcome_initial_ncells_positions_set
    __swig_getmethods__["initial_ncells_positions"] = _pyainl16.Welcome_initial_ncells_positions_get
    if _newclass:initial_ncells_positions = _swig_property(_pyainl16.Welcome_initial_ncells_positions_get, _pyainl16.Welcome_initial_ncells_positions_set)
    def __init__(self): 
        this = _pyainl16.new_Welcome()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyainl16.delete_Welcome
    __del__ = lambda self : None;
Welcome_swigregister = _pyainl16.Welcome_swigregister
Welcome_swigregister(Welcome)

class Virus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Virus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Virus, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _pyainl16.Virus_id_set
    __swig_getmethods__["id"] = _pyainl16.Virus_id_get
    if _newclass:id = _swig_property(_pyainl16.Virus_id_get, _pyainl16.Virus_id_set)
    __swig_setmethods__["position"] = _pyainl16.Virus_position_set
    __swig_getmethods__["position"] = _pyainl16.Virus_position_get
    if _newclass:position = _swig_property(_pyainl16.Virus_position_get, _pyainl16.Virus_position_set)
    def __repr__(self):
        return '{{id:{}, pos:{}}}'.format(self.id, self.position)

    def __init__(self): 
        this = _pyainl16.new_Virus()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyainl16.delete_Virus
    __del__ = lambda self : None;
Virus_swigregister = _pyainl16.Virus_swigregister
Virus_swigregister(Virus)

class PlayerCell(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlayerCell, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PlayerCell, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pcell_id"] = _pyainl16.PlayerCell_pcell_id_set
    __swig_getmethods__["pcell_id"] = _pyainl16.PlayerCell_pcell_id_get
    if _newclass:pcell_id = _swig_property(_pyainl16.PlayerCell_pcell_id_get, _pyainl16.PlayerCell_pcell_id_set)
    __swig_setmethods__["player_id"] = _pyainl16.PlayerCell_player_id_set
    __swig_getmethods__["player_id"] = _pyainl16.PlayerCell_player_id_get
    if _newclass:player_id = _swig_property(_pyainl16.PlayerCell_player_id_get, _pyainl16.PlayerCell_player_id_set)
    __swig_setmethods__["position"] = _pyainl16.PlayerCell_position_set
    __swig_getmethods__["position"] = _pyainl16.PlayerCell_position_get
    if _newclass:position = _swig_property(_pyainl16.PlayerCell_position_get, _pyainl16.PlayerCell_position_set)
    __swig_setmethods__["mass"] = _pyainl16.PlayerCell_mass_set
    __swig_getmethods__["mass"] = _pyainl16.PlayerCell_mass_get
    if _newclass:mass = _swig_property(_pyainl16.PlayerCell_mass_get, _pyainl16.PlayerCell_mass_set)
    __swig_setmethods__["remaining_isolated_turns"] = _pyainl16.PlayerCell_remaining_isolated_turns_set
    __swig_getmethods__["remaining_isolated_turns"] = _pyainl16.PlayerCell_remaining_isolated_turns_get
    if _newclass:remaining_isolated_turns = _swig_property(_pyainl16.PlayerCell_remaining_isolated_turns_get, _pyainl16.PlayerCell_remaining_isolated_turns_set)
    def __repr__(self):
        return '{{id:{}, player_id:{}, pos:{}, mass:{}, isolated:{}}}'.format(self.pcell_id, self.player_id, self.position, self.mass, self.remaining_isolated_turns)

    def __init__(self): 
        this = _pyainl16.new_PlayerCell()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyainl16.delete_PlayerCell
    __del__ = lambda self : None;
PlayerCell_swigregister = _pyainl16.PlayerCell_swigregister
PlayerCell_swigregister(PlayerCell)

class Player(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Player, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Player, name)
    __repr__ = _swig_repr
    __swig_setmethods__["player_id"] = _pyainl16.Player_player_id_set
    __swig_getmethods__["player_id"] = _pyainl16.Player_player_id_get
    if _newclass:player_id = _swig_property(_pyainl16.Player_player_id_get, _pyainl16.Player_player_id_set)
    __swig_setmethods__["name"] = _pyainl16.Player_name_set
    __swig_getmethods__["name"] = _pyainl16.Player_name_get
    if _newclass:name = _swig_property(_pyainl16.Player_name_get, _pyainl16.Player_name_set)
    __swig_setmethods__["nb_cells"] = _pyainl16.Player_nb_cells_set
    __swig_getmethods__["nb_cells"] = _pyainl16.Player_nb_cells_get
    if _newclass:nb_cells = _swig_property(_pyainl16.Player_nb_cells_get, _pyainl16.Player_nb_cells_set)
    __swig_setmethods__["mass"] = _pyainl16.Player_mass_set
    __swig_getmethods__["mass"] = _pyainl16.Player_mass_get
    if _newclass:mass = _swig_property(_pyainl16.Player_mass_get, _pyainl16.Player_mass_set)
    __swig_setmethods__["score"] = _pyainl16.Player_score_set
    __swig_getmethods__["score"] = _pyainl16.Player_score_get
    if _newclass:score = _swig_property(_pyainl16.Player_score_get, _pyainl16.Player_score_set)
    def __repr__(self):
        return "{{player_id:{}, name:'{}', nb_cells:{}, mass:{}, score:{}}}".format(self.player_id, self.name, self.nb_cells, self.mass, self.score)

    def __init__(self): 
        this = _pyainl16.new_Player()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyainl16.delete_Player
    __del__ = lambda self : None;
Player_swigregister = _pyainl16.Player_swigregister
Player_swigregister(Player)

class NeutralCell(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NeutralCell, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NeutralCell, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _pyainl16.NeutralCell_id_set
    __swig_getmethods__["id"] = _pyainl16.NeutralCell_id_get
    if _newclass:id = _swig_property(_pyainl16.NeutralCell_id_get, _pyainl16.NeutralCell_id_set)
    __swig_setmethods__["position"] = _pyainl16.NeutralCell_position_set
    __swig_getmethods__["position"] = _pyainl16.NeutralCell_position_get
    if _newclass:position = _swig_property(_pyainl16.NeutralCell_position_get, _pyainl16.NeutralCell_position_set)
    __swig_setmethods__["mass"] = _pyainl16.NeutralCell_mass_set
    __swig_getmethods__["mass"] = _pyainl16.NeutralCell_mass_get
    if _newclass:mass = _swig_property(_pyainl16.NeutralCell_mass_get, _pyainl16.NeutralCell_mass_set)
    __swig_setmethods__["is_initial"] = _pyainl16.NeutralCell_is_initial_set
    __swig_getmethods__["is_initial"] = _pyainl16.NeutralCell_is_initial_get
    if _newclass:is_initial = _swig_property(_pyainl16.NeutralCell_is_initial_get, _pyainl16.NeutralCell_is_initial_set)
    __swig_setmethods__["remaining_turns_before_apparition"] = _pyainl16.NeutralCell_remaining_turns_before_apparition_set
    __swig_getmethods__["remaining_turns_before_apparition"] = _pyainl16.NeutralCell_remaining_turns_before_apparition_get
    if _newclass:remaining_turns_before_apparition = _swig_property(_pyainl16.NeutralCell_remaining_turns_before_apparition_get, _pyainl16.NeutralCell_remaining_turns_before_apparition_set)
    __swig_setmethods__["is_alive"] = _pyainl16.NeutralCell_is_alive_set
    __swig_getmethods__["is_alive"] = _pyainl16.NeutralCell_is_alive_get
    if _newclass:is_alive = _swig_property(_pyainl16.NeutralCell_is_alive_get, _pyainl16.NeutralCell_is_alive_set)
    def __repr__(self):
        return '{{id:{}, pos:{}, mass:{}, remaining:{}, alive:{}}}'.format(self.id, self.position, self.mass, self.remaining_turns_before_apparition, self.is_alive)

    def __init__(self): 
        this = _pyainl16.new_NeutralCell()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyainl16.delete_NeutralCell
    __del__ = lambda self : None;
NeutralCell_swigregister = _pyainl16.NeutralCell_swigregister
NeutralCell_swigregister(NeutralCell)

class Session(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Session, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Session, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyainl16.new_Session()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyainl16.delete_Session
    __del__ = lambda self : None;
    def connect(self, *args): return _pyainl16.Session_connect(self, *args)
    def login_player(self, *args): return _pyainl16.Session_login_player(self, *args)
    def login_visu(self, *args): return _pyainl16.Session_login_visu(self, *args)
    def wait_for_welcome(self): return _pyainl16.Session_wait_for_welcome(self)
    def wait_for_game_starts(self): return _pyainl16.Session_wait_for_game_starts(self)
    def wait_for_next_turn(self): return _pyainl16.Session_wait_for_next_turn(self)
    def send_actions(self, *args): return _pyainl16.Session_send_actions(self, *args)
    def welcome(self): return _pyainl16.Session_welcome(self)
    def current_turn_number(self): return _pyainl16.Session_current_turn_number(self)
    def player_id(self): return _pyainl16.Session_player_id(self)
    def neutral_cells(self): return _pyainl16.Session_neutral_cells(self)
    def my_player_cells(self): return _pyainl16.Session_my_player_cells(self)
    def ennemy_player_cells(self): return _pyainl16.Session_ennemy_player_cells(self)
    def viruses(self): return _pyainl16.Session_viruses(self)
    def is_connected(self): return _pyainl16.Session_is_connected(self)
    def is_logged(self): return _pyainl16.Session_is_logged(self)
    def is_player(self): return _pyainl16.Session_is_player(self)
Session_swigregister = _pyainl16.Session_swigregister
Session_swigregister(Session)

# This file is compatible with both classic and new-style classes.


