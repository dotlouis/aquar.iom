/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.contest16;

public class GameParameters {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected GameParameters(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(GameParameters obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        jainl16JNI.delete_GameParameters(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void setMap_width(float value) {
    jainl16JNI.GameParameters_map_width_set(swigCPtr, this, value);
  }

  public float getMap_width() {
    return jainl16JNI.GameParameters_map_width_get(swigCPtr, this);
  }

  public void setMap_height(float value) {
    jainl16JNI.GameParameters_map_height_set(swigCPtr, this, value);
  }

  public float getMap_height() {
    return jainl16JNI.GameParameters_map_height_get(swigCPtr, this);
  }

  public void setMin_nb_players(int value) {
    jainl16JNI.GameParameters_min_nb_players_set(swigCPtr, this, value);
  }

  public int getMin_nb_players() {
    return jainl16JNI.GameParameters_min_nb_players_get(swigCPtr, this);
  }

  public void setMax_nb_players(int value) {
    jainl16JNI.GameParameters_max_nb_players_set(swigCPtr, this, value);
  }

  public int getMax_nb_players() {
    return jainl16JNI.GameParameters_max_nb_players_get(swigCPtr, this);
  }

  public void setMass_absorption(float value) {
    jainl16JNI.GameParameters_mass_absorption_set(swigCPtr, this, value);
  }

  public float getMass_absorption() {
    return jainl16JNI.GameParameters_mass_absorption_get(swigCPtr, this);
  }

  public void setMinimum_mass_ratio_to_absorb(float value) {
    jainl16JNI.GameParameters_minimum_mass_ratio_to_absorb_set(swigCPtr, this, value);
  }

  public float getMinimum_mass_ratio_to_absorb() {
    return jainl16JNI.GameParameters_minimum_mass_ratio_to_absorb_get(swigCPtr, this);
  }

  public void setMinimum_pcell_mass(float value) {
    jainl16JNI.GameParameters_minimum_pcell_mass_set(swigCPtr, this, value);
  }

  public float getMinimum_pcell_mass() {
    return jainl16JNI.GameParameters_minimum_pcell_mass_get(swigCPtr, this);
  }

  public void setMaximum_pcell_mass(float value) {
    jainl16JNI.GameParameters_maximum_pcell_mass_set(swigCPtr, this, value);
  }

  public float getMaximum_pcell_mass() {
    return jainl16JNI.GameParameters_maximum_pcell_mass_get(swigCPtr, this);
  }

  public void setRadius_factor(float value) {
    jainl16JNI.GameParameters_radius_factor_set(swigCPtr, this, value);
  }

  public float getRadius_factor() {
    return jainl16JNI.GameParameters_radius_factor_get(swigCPtr, this);
  }

  public void setMax_cells_per_player(int value) {
    jainl16JNI.GameParameters_max_cells_per_player_set(swigCPtr, this, value);
  }

  public int getMax_cells_per_player() {
    return jainl16JNI.GameParameters_max_cells_per_player_get(swigCPtr, this);
  }

  public void setMass_loss_per_frame(float value) {
    jainl16JNI.GameParameters_mass_loss_per_frame_set(swigCPtr, this, value);
  }

  public float getMass_loss_per_frame() {
    return jainl16JNI.GameParameters_mass_loss_per_frame_get(swigCPtr, this);
  }

  public void setBase_cell_speed(float value) {
    jainl16JNI.GameParameters_base_cell_speed_set(swigCPtr, this, value);
  }

  public float getBase_cell_speed() {
    return jainl16JNI.GameParameters_base_cell_speed_get(swigCPtr, this);
  }

  public void setSpeed_loss_factor(float value) {
    jainl16JNI.GameParameters_speed_loss_factor_set(swigCPtr, this, value);
  }

  public float getSpeed_loss_factor() {
    return jainl16JNI.GameParameters_speed_loss_factor_get(swigCPtr, this);
  }

  public void setVirus_mass(float value) {
    jainl16JNI.GameParameters_virus_mass_set(swigCPtr, this, value);
  }

  public float getVirus_mass() {
    return jainl16JNI.GameParameters_virus_mass_get(swigCPtr, this);
  }

  public void setVirus_creation_mass_loss(float value) {
    jainl16JNI.GameParameters_virus_creation_mass_loss_set(swigCPtr, this, value);
  }

  public float getVirus_creation_mass_loss() {
    return jainl16JNI.GameParameters_virus_creation_mass_loss_get(swigCPtr, this);
  }

  public void setVirus_max_split(int value) {
    jainl16JNI.GameParameters_virus_max_split_set(swigCPtr, this, value);
  }

  public int getVirus_max_split() {
    return jainl16JNI.GameParameters_virus_max_split_get(swigCPtr, this);
  }

  public void setNb_starting_cells_per_player(int value) {
    jainl16JNI.GameParameters_nb_starting_cells_per_player_set(swigCPtr, this, value);
  }

  public int getNb_starting_cells_per_player() {
    return jainl16JNI.GameParameters_nb_starting_cells_per_player_get(swigCPtr, this);
  }

  public void setPlayer_cells_starting_mass(float value) {
    jainl16JNI.GameParameters_player_cells_starting_mass_set(swigCPtr, this, value);
  }

  public float getPlayer_cells_starting_mass() {
    return jainl16JNI.GameParameters_player_cells_starting_mass_get(swigCPtr, this);
  }

  public void setInitial_neutral_cells_mass(float value) {
    jainl16JNI.GameParameters_initial_neutral_cells_mass_set(swigCPtr, this, value);
  }

  public float getInitial_neutral_cells_mass() {
    return jainl16JNI.GameParameters_initial_neutral_cells_mass_get(swigCPtr, this);
  }

  public void setInitial_neutral_cells_repop_time(int value) {
    jainl16JNI.GameParameters_initial_neutral_cells_repop_time_set(swigCPtr, this, value);
  }

  public int getInitial_neutral_cells_repop_time() {
    return jainl16JNI.GameParameters_initial_neutral_cells_repop_time_get(swigCPtr, this);
  }

  public void setNb_turns(int value) {
    jainl16JNI.GameParameters_nb_turns_set(swigCPtr, this, value);
  }

  public int getNb_turns() {
    return jainl16JNI.GameParameters_nb_turns_get(swigCPtr, this);
  }

  public GameParameters() {
    this(jainl16JNI.new_GameParameters(), true);
  }

}
