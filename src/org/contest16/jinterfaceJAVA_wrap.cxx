/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




#include "ainetlib16.hpp"


#include <stdexcept>


#include <string>


#include <vector>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <stdexcept>


#include <utility>


#include <stdint.h>		// Use the C99 official header

SWIGINTERN std::vector< ainet16::GameEndsPlayer >::const_reference std_vector_Sl_ainet16_GameEndsPlayer_Sg__get(std::vector< ainet16::GameEndsPlayer > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_ainet16_GameEndsPlayer_Sg__set(std::vector< ainet16::GameEndsPlayer > *self,int i,std::vector< ainet16::GameEndsPlayer >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< ainet16::Position >::const_reference std_vector_Sl_ainet16_Position_Sg__get(std::vector< ainet16::Position > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_ainet16_Position_Sg__set(std::vector< ainet16::Position > *self,int i,std::vector< ainet16::Position >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< ainet16::TurnVirus >::const_reference std_vector_Sl_ainet16_TurnVirus_Sg__get(std::vector< ainet16::TurnVirus > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_ainet16_TurnVirus_Sg__set(std::vector< ainet16::TurnVirus > *self,int i,std::vector< ainet16::TurnVirus >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< ainet16::TurnPlayerCell >::const_reference std_vector_Sl_ainet16_TurnPlayerCell_Sg__get(std::vector< ainet16::TurnPlayerCell > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_ainet16_TurnPlayerCell_Sg__set(std::vector< ainet16::TurnPlayerCell > *self,int i,std::vector< ainet16::TurnPlayerCell >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< ainet16::TurnPlayer >::const_reference std_vector_Sl_ainet16_TurnPlayer_Sg__get(std::vector< ainet16::TurnPlayer > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_ainet16_TurnPlayer_Sg__set(std::vector< ainet16::TurnPlayer > *self,int i,std::vector< ainet16::TurnPlayer >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< ainet16::NeutralCell >::const_reference std_vector_Sl_ainet16_NeutralCell_Sg__get(std::vector< ainet16::NeutralCell > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_ainet16_NeutralCell_Sg__set(std::vector< ainet16::NeutralCell > *self,int i,std::vector< ainet16::NeutralCell >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_new_1GameEndsPlayerVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< ainet16::GameEndsPlayer > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< ainet16::GameEndsPlayer > *)new std::vector< ainet16::GameEndsPlayer >();
  *(std::vector< ainet16::GameEndsPlayer > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_new_1GameEndsPlayerVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< ainet16::GameEndsPlayer >::size_type arg1 ;
  std::vector< ainet16::GameEndsPlayer > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< ainet16::GameEndsPlayer >::size_type)jarg1; 
  result = (std::vector< ainet16::GameEndsPlayer > *)new std::vector< ainet16::GameEndsPlayer >(arg1);
  *(std::vector< ainet16::GameEndsPlayer > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_GameEndsPlayerVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< ainet16::GameEndsPlayer > *arg1 = (std::vector< ainet16::GameEndsPlayer > *) 0 ;
  std::vector< ainet16::GameEndsPlayer >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ainet16::GameEndsPlayer > **)&jarg1; 
  result = ((std::vector< ainet16::GameEndsPlayer > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_GameEndsPlayerVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< ainet16::GameEndsPlayer > *arg1 = (std::vector< ainet16::GameEndsPlayer > *) 0 ;
  std::vector< ainet16::GameEndsPlayer >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ainet16::GameEndsPlayer > **)&jarg1; 
  result = ((std::vector< ainet16::GameEndsPlayer > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_GameEndsPlayerVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< ainet16::GameEndsPlayer > *arg1 = (std::vector< ainet16::GameEndsPlayer > *) 0 ;
  std::vector< ainet16::GameEndsPlayer >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ainet16::GameEndsPlayer > **)&jarg1; 
  arg2 = (std::vector< ainet16::GameEndsPlayer >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_contest16_jainl16JNI_GameEndsPlayerVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< ainet16::GameEndsPlayer > *arg1 = (std::vector< ainet16::GameEndsPlayer > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ainet16::GameEndsPlayer > **)&jarg1; 
  result = (bool)((std::vector< ainet16::GameEndsPlayer > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_GameEndsPlayerVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< ainet16::GameEndsPlayer > *arg1 = (std::vector< ainet16::GameEndsPlayer > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ainet16::GameEndsPlayer > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_GameEndsPlayerVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< ainet16::GameEndsPlayer > *arg1 = (std::vector< ainet16::GameEndsPlayer > *) 0 ;
  std::vector< ainet16::GameEndsPlayer >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< ainet16::GameEndsPlayer > **)&jarg1; 
  arg2 = *(std::vector< ainet16::GameEndsPlayer >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< ainet16::GameEndsPlayer >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< ainet16::GameEndsPlayer >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_GameEndsPlayerVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< ainet16::GameEndsPlayer > *arg1 = (std::vector< ainet16::GameEndsPlayer > *) 0 ;
  int arg2 ;
  std::vector< ainet16::GameEndsPlayer >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ainet16::GameEndsPlayer > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< ainet16::GameEndsPlayer >::value_type *) &std_vector_Sl_ainet16_GameEndsPlayer_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< ainet16::GameEndsPlayer >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_GameEndsPlayerVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< ainet16::GameEndsPlayer > *arg1 = (std::vector< ainet16::GameEndsPlayer > *) 0 ;
  int arg2 ;
  std::vector< ainet16::GameEndsPlayer >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< ainet16::GameEndsPlayer > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< ainet16::GameEndsPlayer >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< ainet16::GameEndsPlayer >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_ainet16_GameEndsPlayer_Sg__set(arg1,arg2,(ainet16::GameEndsPlayer const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_delete_1GameEndsPlayerVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< ainet16::GameEndsPlayer > *arg1 = (std::vector< ainet16::GameEndsPlayer > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< ainet16::GameEndsPlayer > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_new_1PositionVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< ainet16::Position > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< ainet16::Position > *)new std::vector< ainet16::Position >();
  *(std::vector< ainet16::Position > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_new_1PositionVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< ainet16::Position >::size_type arg1 ;
  std::vector< ainet16::Position > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< ainet16::Position >::size_type)jarg1; 
  result = (std::vector< ainet16::Position > *)new std::vector< ainet16::Position >(arg1);
  *(std::vector< ainet16::Position > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_PositionVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< ainet16::Position > *arg1 = (std::vector< ainet16::Position > *) 0 ;
  std::vector< ainet16::Position >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ainet16::Position > **)&jarg1; 
  result = ((std::vector< ainet16::Position > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_PositionVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< ainet16::Position > *arg1 = (std::vector< ainet16::Position > *) 0 ;
  std::vector< ainet16::Position >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ainet16::Position > **)&jarg1; 
  result = ((std::vector< ainet16::Position > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_PositionVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< ainet16::Position > *arg1 = (std::vector< ainet16::Position > *) 0 ;
  std::vector< ainet16::Position >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ainet16::Position > **)&jarg1; 
  arg2 = (std::vector< ainet16::Position >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_contest16_jainl16JNI_PositionVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< ainet16::Position > *arg1 = (std::vector< ainet16::Position > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ainet16::Position > **)&jarg1; 
  result = (bool)((std::vector< ainet16::Position > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_PositionVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< ainet16::Position > *arg1 = (std::vector< ainet16::Position > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ainet16::Position > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_PositionVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< ainet16::Position > *arg1 = (std::vector< ainet16::Position > *) 0 ;
  std::vector< ainet16::Position >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< ainet16::Position > **)&jarg1; 
  arg2 = *(std::vector< ainet16::Position >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< ainet16::Position >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< ainet16::Position >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_PositionVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< ainet16::Position > *arg1 = (std::vector< ainet16::Position > *) 0 ;
  int arg2 ;
  std::vector< ainet16::Position >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ainet16::Position > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< ainet16::Position >::value_type *) &std_vector_Sl_ainet16_Position_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< ainet16::Position >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_PositionVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< ainet16::Position > *arg1 = (std::vector< ainet16::Position > *) 0 ;
  int arg2 ;
  std::vector< ainet16::Position >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< ainet16::Position > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< ainet16::Position >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< ainet16::Position >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_ainet16_Position_Sg__set(arg1,arg2,(ainet16::Position const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_delete_1PositionVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< ainet16::Position > *arg1 = (std::vector< ainet16::Position > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< ainet16::Position > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_new_1VirusVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< ainet16::TurnVirus > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< ainet16::TurnVirus > *)new std::vector< ainet16::TurnVirus >();
  *(std::vector< ainet16::TurnVirus > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_new_1VirusVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< ainet16::TurnVirus >::size_type arg1 ;
  std::vector< ainet16::TurnVirus > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< ainet16::TurnVirus >::size_type)jarg1; 
  result = (std::vector< ainet16::TurnVirus > *)new std::vector< ainet16::TurnVirus >(arg1);
  *(std::vector< ainet16::TurnVirus > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_VirusVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< ainet16::TurnVirus > *arg1 = (std::vector< ainet16::TurnVirus > *) 0 ;
  std::vector< ainet16::TurnVirus >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ainet16::TurnVirus > **)&jarg1; 
  result = ((std::vector< ainet16::TurnVirus > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_VirusVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< ainet16::TurnVirus > *arg1 = (std::vector< ainet16::TurnVirus > *) 0 ;
  std::vector< ainet16::TurnVirus >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ainet16::TurnVirus > **)&jarg1; 
  result = ((std::vector< ainet16::TurnVirus > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_VirusVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< ainet16::TurnVirus > *arg1 = (std::vector< ainet16::TurnVirus > *) 0 ;
  std::vector< ainet16::TurnVirus >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ainet16::TurnVirus > **)&jarg1; 
  arg2 = (std::vector< ainet16::TurnVirus >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_contest16_jainl16JNI_VirusVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< ainet16::TurnVirus > *arg1 = (std::vector< ainet16::TurnVirus > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ainet16::TurnVirus > **)&jarg1; 
  result = (bool)((std::vector< ainet16::TurnVirus > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_VirusVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< ainet16::TurnVirus > *arg1 = (std::vector< ainet16::TurnVirus > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ainet16::TurnVirus > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_VirusVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< ainet16::TurnVirus > *arg1 = (std::vector< ainet16::TurnVirus > *) 0 ;
  std::vector< ainet16::TurnVirus >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< ainet16::TurnVirus > **)&jarg1; 
  arg2 = *(std::vector< ainet16::TurnVirus >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< ainet16::TurnVirus >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< ainet16::TurnVirus >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_VirusVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< ainet16::TurnVirus > *arg1 = (std::vector< ainet16::TurnVirus > *) 0 ;
  int arg2 ;
  std::vector< ainet16::TurnVirus >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ainet16::TurnVirus > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< ainet16::TurnVirus >::value_type *) &std_vector_Sl_ainet16_TurnVirus_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< ainet16::TurnVirus >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_VirusVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< ainet16::TurnVirus > *arg1 = (std::vector< ainet16::TurnVirus > *) 0 ;
  int arg2 ;
  std::vector< ainet16::TurnVirus >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< ainet16::TurnVirus > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< ainet16::TurnVirus >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< ainet16::TurnVirus >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_ainet16_TurnVirus_Sg__set(arg1,arg2,(ainet16::TurnVirus const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_delete_1VirusVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< ainet16::TurnVirus > *arg1 = (std::vector< ainet16::TurnVirus > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< ainet16::TurnVirus > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_new_1PlayerCellVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< ainet16::TurnPlayerCell > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< ainet16::TurnPlayerCell > *)new std::vector< ainet16::TurnPlayerCell >();
  *(std::vector< ainet16::TurnPlayerCell > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_new_1PlayerCellVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< ainet16::TurnPlayerCell >::size_type arg1 ;
  std::vector< ainet16::TurnPlayerCell > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< ainet16::TurnPlayerCell >::size_type)jarg1; 
  result = (std::vector< ainet16::TurnPlayerCell > *)new std::vector< ainet16::TurnPlayerCell >(arg1);
  *(std::vector< ainet16::TurnPlayerCell > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_PlayerCellVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< ainet16::TurnPlayerCell > *arg1 = (std::vector< ainet16::TurnPlayerCell > *) 0 ;
  std::vector< ainet16::TurnPlayerCell >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ainet16::TurnPlayerCell > **)&jarg1; 
  result = ((std::vector< ainet16::TurnPlayerCell > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_PlayerCellVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< ainet16::TurnPlayerCell > *arg1 = (std::vector< ainet16::TurnPlayerCell > *) 0 ;
  std::vector< ainet16::TurnPlayerCell >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ainet16::TurnPlayerCell > **)&jarg1; 
  result = ((std::vector< ainet16::TurnPlayerCell > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_PlayerCellVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< ainet16::TurnPlayerCell > *arg1 = (std::vector< ainet16::TurnPlayerCell > *) 0 ;
  std::vector< ainet16::TurnPlayerCell >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ainet16::TurnPlayerCell > **)&jarg1; 
  arg2 = (std::vector< ainet16::TurnPlayerCell >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_contest16_jainl16JNI_PlayerCellVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< ainet16::TurnPlayerCell > *arg1 = (std::vector< ainet16::TurnPlayerCell > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ainet16::TurnPlayerCell > **)&jarg1; 
  result = (bool)((std::vector< ainet16::TurnPlayerCell > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_PlayerCellVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< ainet16::TurnPlayerCell > *arg1 = (std::vector< ainet16::TurnPlayerCell > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ainet16::TurnPlayerCell > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_PlayerCellVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< ainet16::TurnPlayerCell > *arg1 = (std::vector< ainet16::TurnPlayerCell > *) 0 ;
  std::vector< ainet16::TurnPlayerCell >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< ainet16::TurnPlayerCell > **)&jarg1; 
  arg2 = *(std::vector< ainet16::TurnPlayerCell >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< ainet16::TurnPlayerCell >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< ainet16::TurnPlayerCell >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_PlayerCellVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< ainet16::TurnPlayerCell > *arg1 = (std::vector< ainet16::TurnPlayerCell > *) 0 ;
  int arg2 ;
  std::vector< ainet16::TurnPlayerCell >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ainet16::TurnPlayerCell > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< ainet16::TurnPlayerCell >::value_type *) &std_vector_Sl_ainet16_TurnPlayerCell_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< ainet16::TurnPlayerCell >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_PlayerCellVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< ainet16::TurnPlayerCell > *arg1 = (std::vector< ainet16::TurnPlayerCell > *) 0 ;
  int arg2 ;
  std::vector< ainet16::TurnPlayerCell >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< ainet16::TurnPlayerCell > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< ainet16::TurnPlayerCell >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< ainet16::TurnPlayerCell >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_ainet16_TurnPlayerCell_Sg__set(arg1,arg2,(ainet16::TurnPlayerCell const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_delete_1PlayerCellVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< ainet16::TurnPlayerCell > *arg1 = (std::vector< ainet16::TurnPlayerCell > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< ainet16::TurnPlayerCell > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_new_1PlayerVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< ainet16::TurnPlayer > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< ainet16::TurnPlayer > *)new std::vector< ainet16::TurnPlayer >();
  *(std::vector< ainet16::TurnPlayer > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_new_1PlayerVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< ainet16::TurnPlayer >::size_type arg1 ;
  std::vector< ainet16::TurnPlayer > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< ainet16::TurnPlayer >::size_type)jarg1; 
  result = (std::vector< ainet16::TurnPlayer > *)new std::vector< ainet16::TurnPlayer >(arg1);
  *(std::vector< ainet16::TurnPlayer > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_PlayerVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< ainet16::TurnPlayer > *arg1 = (std::vector< ainet16::TurnPlayer > *) 0 ;
  std::vector< ainet16::TurnPlayer >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ainet16::TurnPlayer > **)&jarg1; 
  result = ((std::vector< ainet16::TurnPlayer > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_PlayerVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< ainet16::TurnPlayer > *arg1 = (std::vector< ainet16::TurnPlayer > *) 0 ;
  std::vector< ainet16::TurnPlayer >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ainet16::TurnPlayer > **)&jarg1; 
  result = ((std::vector< ainet16::TurnPlayer > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_PlayerVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< ainet16::TurnPlayer > *arg1 = (std::vector< ainet16::TurnPlayer > *) 0 ;
  std::vector< ainet16::TurnPlayer >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ainet16::TurnPlayer > **)&jarg1; 
  arg2 = (std::vector< ainet16::TurnPlayer >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_contest16_jainl16JNI_PlayerVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< ainet16::TurnPlayer > *arg1 = (std::vector< ainet16::TurnPlayer > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ainet16::TurnPlayer > **)&jarg1; 
  result = (bool)((std::vector< ainet16::TurnPlayer > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_PlayerVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< ainet16::TurnPlayer > *arg1 = (std::vector< ainet16::TurnPlayer > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ainet16::TurnPlayer > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_PlayerVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< ainet16::TurnPlayer > *arg1 = (std::vector< ainet16::TurnPlayer > *) 0 ;
  std::vector< ainet16::TurnPlayer >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< ainet16::TurnPlayer > **)&jarg1; 
  arg2 = *(std::vector< ainet16::TurnPlayer >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< ainet16::TurnPlayer >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< ainet16::TurnPlayer >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_PlayerVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< ainet16::TurnPlayer > *arg1 = (std::vector< ainet16::TurnPlayer > *) 0 ;
  int arg2 ;
  std::vector< ainet16::TurnPlayer >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ainet16::TurnPlayer > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< ainet16::TurnPlayer >::value_type *) &std_vector_Sl_ainet16_TurnPlayer_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< ainet16::TurnPlayer >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_PlayerVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< ainet16::TurnPlayer > *arg1 = (std::vector< ainet16::TurnPlayer > *) 0 ;
  int arg2 ;
  std::vector< ainet16::TurnPlayer >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< ainet16::TurnPlayer > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< ainet16::TurnPlayer >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< ainet16::TurnPlayer >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_ainet16_TurnPlayer_Sg__set(arg1,arg2,(ainet16::TurnPlayer const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_delete_1PlayerVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< ainet16::TurnPlayer > *arg1 = (std::vector< ainet16::TurnPlayer > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< ainet16::TurnPlayer > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_new_1NeutralCellVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< ainet16::NeutralCell > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< ainet16::NeutralCell > *)new std::vector< ainet16::NeutralCell >();
  *(std::vector< ainet16::NeutralCell > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_new_1NeutralCellVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< ainet16::NeutralCell >::size_type arg1 ;
  std::vector< ainet16::NeutralCell > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< ainet16::NeutralCell >::size_type)jarg1; 
  result = (std::vector< ainet16::NeutralCell > *)new std::vector< ainet16::NeutralCell >(arg1);
  *(std::vector< ainet16::NeutralCell > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_NeutralCellVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< ainet16::NeutralCell > *arg1 = (std::vector< ainet16::NeutralCell > *) 0 ;
  std::vector< ainet16::NeutralCell >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ainet16::NeutralCell > **)&jarg1; 
  result = ((std::vector< ainet16::NeutralCell > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_NeutralCellVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< ainet16::NeutralCell > *arg1 = (std::vector< ainet16::NeutralCell > *) 0 ;
  std::vector< ainet16::NeutralCell >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ainet16::NeutralCell > **)&jarg1; 
  result = ((std::vector< ainet16::NeutralCell > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_NeutralCellVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< ainet16::NeutralCell > *arg1 = (std::vector< ainet16::NeutralCell > *) 0 ;
  std::vector< ainet16::NeutralCell >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ainet16::NeutralCell > **)&jarg1; 
  arg2 = (std::vector< ainet16::NeutralCell >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_contest16_jainl16JNI_NeutralCellVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< ainet16::NeutralCell > *arg1 = (std::vector< ainet16::NeutralCell > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ainet16::NeutralCell > **)&jarg1; 
  result = (bool)((std::vector< ainet16::NeutralCell > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_NeutralCellVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< ainet16::NeutralCell > *arg1 = (std::vector< ainet16::NeutralCell > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ainet16::NeutralCell > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_NeutralCellVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< ainet16::NeutralCell > *arg1 = (std::vector< ainet16::NeutralCell > *) 0 ;
  std::vector< ainet16::NeutralCell >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< ainet16::NeutralCell > **)&jarg1; 
  arg2 = *(std::vector< ainet16::NeutralCell >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< ainet16::NeutralCell >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< ainet16::NeutralCell >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_NeutralCellVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< ainet16::NeutralCell > *arg1 = (std::vector< ainet16::NeutralCell > *) 0 ;
  int arg2 ;
  std::vector< ainet16::NeutralCell >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ainet16::NeutralCell > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< ainet16::NeutralCell >::value_type *) &std_vector_Sl_ainet16_NeutralCell_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< ainet16::NeutralCell >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_NeutralCellVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< ainet16::NeutralCell > *arg1 = (std::vector< ainet16::NeutralCell > *) 0 ;
  int arg2 ;
  std::vector< ainet16::NeutralCell >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< ainet16::NeutralCell > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< ainet16::NeutralCell >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< ainet16::NeutralCell >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_ainet16_NeutralCell_Sg__set(arg1,arg2,(ainet16::NeutralCell const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_delete_1NeutralCellVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< ainet16::NeutralCell > *arg1 = (std::vector< ainet16::NeutralCell > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< ainet16::NeutralCell > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_GameEndsPlayer_1player_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ainet16::GameEndsPlayer *arg1 = (ainet16::GameEndsPlayer *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::GameEndsPlayer **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->player_id = arg2;
}


SWIGEXPORT jint JNICALL Java_org_contest16_jainl16JNI_GameEndsPlayer_1player_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ainet16::GameEndsPlayer *arg1 = (ainet16::GameEndsPlayer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::GameEndsPlayer **)&jarg1; 
  result = (int) ((arg1)->player_id);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_GameEndsPlayer_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ainet16::GameEndsPlayer *arg1 = (ainet16::GameEndsPlayer *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::GameEndsPlayer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_contest16_jainl16JNI_GameEndsPlayer_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ainet16::GameEndsPlayer *arg1 = (ainet16::GameEndsPlayer *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::GameEndsPlayer **)&jarg1; 
  result = (std::string *) & ((arg1)->name);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_GameEndsPlayer_1score_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  ainet16::GameEndsPlayer *arg1 = (ainet16::GameEndsPlayer *) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::GameEndsPlayer **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (uint64_t)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  if (arg1) (arg1)->score = arg2;
}


SWIGEXPORT jobject JNICALL Java_org_contest16_jainl16JNI_GameEndsPlayer_1score_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  ainet16::GameEndsPlayer *arg1 = (ainet16::GameEndsPlayer *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::GameEndsPlayer **)&jarg1; 
  result = (uint64_t) ((arg1)->score);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_new_1GameEndsPlayer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ainet16::GameEndsPlayer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ainet16::GameEndsPlayer *)new ainet16::GameEndsPlayer();
  *(ainet16::GameEndsPlayer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_delete_1GameEndsPlayer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ainet16::GameEndsPlayer *arg1 = (ainet16::GameEndsPlayer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ainet16::GameEndsPlayer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_new_1AINetException(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  ainet16::AINetException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (ainet16::AINetException *)new ainet16::AINetException((std::string const &)*arg1);
  *(ainet16::AINetException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_contest16_jainl16JNI_AINetException_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ainet16::AINetException *arg1 = (ainet16::AINetException *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::AINetException **)&jarg1; 
  result = ((ainet16::AINetException const *)arg1)->what();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_delete_1AINetException(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ainet16::AINetException *arg1 = (ainet16::AINetException *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ainet16::AINetException **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_new_1DisconnectedException_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  ainet16::DisconnectedException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (ainet16::DisconnectedException *)new ainet16::DisconnectedException((std::string const &)*arg1);
  *(ainet16::DisconnectedException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_new_1DisconnectedException_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ainet16::DisconnectedException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ainet16::DisconnectedException *)new ainet16::DisconnectedException();
  *(ainet16::DisconnectedException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_contest16_jainl16JNI_DisconnectedException_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ainet16::DisconnectedException *arg1 = (ainet16::DisconnectedException *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::DisconnectedException **)&jarg1; 
  result = ((ainet16::DisconnectedException const *)arg1)->what();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_delete_1DisconnectedException(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ainet16::DisconnectedException *arg1 = (ainet16::DisconnectedException *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ainet16::DisconnectedException **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_new_1KickException_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  ainet16::KickException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (ainet16::KickException *)new ainet16::KickException((std::string const &)*arg1);
  *(ainet16::KickException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_new_1KickException_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ainet16::KickException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ainet16::KickException *)new ainet16::KickException();
  *(ainet16::KickException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_contest16_jainl16JNI_KickException_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ainet16::KickException *arg1 = (ainet16::KickException *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::KickException **)&jarg1; 
  result = ((ainet16::KickException const *)arg1)->what();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_delete_1KickException(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ainet16::KickException *arg1 = (ainet16::KickException *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ainet16::KickException **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_new_1SocketErrorException_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  ainet16::SocketErrorException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (ainet16::SocketErrorException *)new ainet16::SocketErrorException((std::string const &)*arg1);
  *(ainet16::SocketErrorException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_new_1SocketErrorException_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ainet16::SocketErrorException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ainet16::SocketErrorException *)new ainet16::SocketErrorException();
  *(ainet16::SocketErrorException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_contest16_jainl16JNI_SocketErrorException_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ainet16::SocketErrorException *arg1 = (ainet16::SocketErrorException *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::SocketErrorException **)&jarg1; 
  result = ((ainet16::SocketErrorException const *)arg1)->what();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_delete_1SocketErrorException(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ainet16::SocketErrorException *arg1 = (ainet16::SocketErrorException *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ainet16::SocketErrorException **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_Position_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ainet16::Position *arg1 = (ainet16::Position *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::Position **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_contest16_jainl16JNI_Position_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ainet16::Position *arg1 = (ainet16::Position *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::Position **)&jarg1; 
  result = (float) ((arg1)->x);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_Position_1y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ainet16::Position *arg1 = (ainet16::Position *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::Position **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_contest16_jainl16JNI_Position_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ainet16::Position *arg1 = (ainet16::Position *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::Position **)&jarg1; 
  result = (float) ((arg1)->y);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_new_1Position(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ainet16::Position *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ainet16::Position *)new ainet16::Position();
  *(ainet16::Position **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_delete_1Position(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ainet16::Position *arg1 = (ainet16::Position *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ainet16::Position **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_new_1Actions(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ainet16::Actions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ainet16::Actions *)new ainet16::Actions();
  *(ainet16::Actions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_delete_1Actions(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ainet16::Actions *arg1 = (ainet16::Actions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ainet16::Actions **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_Actions_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ainet16::Actions *arg1 = (ainet16::Actions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::Actions **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_Actions_1add_1move_1action(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3, jfloat jarg4) {
  ainet16::Actions *arg1 = (ainet16::Actions *) 0 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::Actions **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->add_move_action(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_Actions_1add_1divide_1action(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  ainet16::Actions *arg1 = (ainet16::Actions *) 0 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::Actions **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->add_divide_action(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_Actions_1add_1create_1virus_1action(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3, jfloat jarg4) {
  ainet16::Actions *arg1 = (ainet16::Actions *) 0 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::Actions **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->add_create_virus_action(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_Actions_1add_1surrender_1action(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ainet16::Actions *arg1 = (ainet16::Actions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::Actions **)&jarg1; 
  (arg1)->add_surrender_action();
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_GameParameters_1map_1width_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ainet16::GameParameters *arg1 = (ainet16::GameParameters *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::GameParameters **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->map_width = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_contest16_jainl16JNI_GameParameters_1map_1width_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ainet16::GameParameters *arg1 = (ainet16::GameParameters *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::GameParameters **)&jarg1; 
  result = (float) ((arg1)->map_width);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_GameParameters_1map_1height_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ainet16::GameParameters *arg1 = (ainet16::GameParameters *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::GameParameters **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->map_height = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_contest16_jainl16JNI_GameParameters_1map_1height_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ainet16::GameParameters *arg1 = (ainet16::GameParameters *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::GameParameters **)&jarg1; 
  result = (float) ((arg1)->map_height);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_GameParameters_1min_1nb_1players_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ainet16::GameParameters *arg1 = (ainet16::GameParameters *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::GameParameters **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->min_nb_players = arg2;
}


SWIGEXPORT jint JNICALL Java_org_contest16_jainl16JNI_GameParameters_1min_1nb_1players_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ainet16::GameParameters *arg1 = (ainet16::GameParameters *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::GameParameters **)&jarg1; 
  result = (int) ((arg1)->min_nb_players);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_GameParameters_1max_1nb_1players_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ainet16::GameParameters *arg1 = (ainet16::GameParameters *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::GameParameters **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->max_nb_players = arg2;
}


SWIGEXPORT jint JNICALL Java_org_contest16_jainl16JNI_GameParameters_1max_1nb_1players_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ainet16::GameParameters *arg1 = (ainet16::GameParameters *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::GameParameters **)&jarg1; 
  result = (int) ((arg1)->max_nb_players);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_GameParameters_1mass_1absorption_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ainet16::GameParameters *arg1 = (ainet16::GameParameters *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::GameParameters **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->mass_absorption = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_contest16_jainl16JNI_GameParameters_1mass_1absorption_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ainet16::GameParameters *arg1 = (ainet16::GameParameters *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::GameParameters **)&jarg1; 
  result = (float) ((arg1)->mass_absorption);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_GameParameters_1minimum_1mass_1ratio_1to_1absorb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ainet16::GameParameters *arg1 = (ainet16::GameParameters *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::GameParameters **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->minimum_mass_ratio_to_absorb = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_contest16_jainl16JNI_GameParameters_1minimum_1mass_1ratio_1to_1absorb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ainet16::GameParameters *arg1 = (ainet16::GameParameters *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::GameParameters **)&jarg1; 
  result = (float) ((arg1)->minimum_mass_ratio_to_absorb);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_GameParameters_1minimum_1pcell_1mass_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ainet16::GameParameters *arg1 = (ainet16::GameParameters *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::GameParameters **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->minimum_pcell_mass = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_contest16_jainl16JNI_GameParameters_1minimum_1pcell_1mass_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ainet16::GameParameters *arg1 = (ainet16::GameParameters *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::GameParameters **)&jarg1; 
  result = (float) ((arg1)->minimum_pcell_mass);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_GameParameters_1maximum_1pcell_1mass_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ainet16::GameParameters *arg1 = (ainet16::GameParameters *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::GameParameters **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->maximum_pcell_mass = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_contest16_jainl16JNI_GameParameters_1maximum_1pcell_1mass_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ainet16::GameParameters *arg1 = (ainet16::GameParameters *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::GameParameters **)&jarg1; 
  result = (float) ((arg1)->maximum_pcell_mass);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_GameParameters_1radius_1factor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ainet16::GameParameters *arg1 = (ainet16::GameParameters *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::GameParameters **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->radius_factor = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_contest16_jainl16JNI_GameParameters_1radius_1factor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ainet16::GameParameters *arg1 = (ainet16::GameParameters *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::GameParameters **)&jarg1; 
  result = (float) ((arg1)->radius_factor);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_GameParameters_1max_1cells_1per_1player_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ainet16::GameParameters *arg1 = (ainet16::GameParameters *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::GameParameters **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->max_cells_per_player = arg2;
}


SWIGEXPORT jint JNICALL Java_org_contest16_jainl16JNI_GameParameters_1max_1cells_1per_1player_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ainet16::GameParameters *arg1 = (ainet16::GameParameters *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::GameParameters **)&jarg1; 
  result = (int) ((arg1)->max_cells_per_player);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_GameParameters_1mass_1loss_1per_1frame_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ainet16::GameParameters *arg1 = (ainet16::GameParameters *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::GameParameters **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->mass_loss_per_frame = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_contest16_jainl16JNI_GameParameters_1mass_1loss_1per_1frame_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ainet16::GameParameters *arg1 = (ainet16::GameParameters *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::GameParameters **)&jarg1; 
  result = (float) ((arg1)->mass_loss_per_frame);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_GameParameters_1base_1cell_1speed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ainet16::GameParameters *arg1 = (ainet16::GameParameters *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::GameParameters **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->base_cell_speed = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_contest16_jainl16JNI_GameParameters_1base_1cell_1speed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ainet16::GameParameters *arg1 = (ainet16::GameParameters *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::GameParameters **)&jarg1; 
  result = (float) ((arg1)->base_cell_speed);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_GameParameters_1speed_1loss_1factor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ainet16::GameParameters *arg1 = (ainet16::GameParameters *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::GameParameters **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->speed_loss_factor = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_contest16_jainl16JNI_GameParameters_1speed_1loss_1factor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ainet16::GameParameters *arg1 = (ainet16::GameParameters *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::GameParameters **)&jarg1; 
  result = (float) ((arg1)->speed_loss_factor);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_GameParameters_1virus_1mass_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ainet16::GameParameters *arg1 = (ainet16::GameParameters *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::GameParameters **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->virus_mass = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_contest16_jainl16JNI_GameParameters_1virus_1mass_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ainet16::GameParameters *arg1 = (ainet16::GameParameters *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::GameParameters **)&jarg1; 
  result = (float) ((arg1)->virus_mass);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_GameParameters_1virus_1creation_1mass_1loss_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ainet16::GameParameters *arg1 = (ainet16::GameParameters *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::GameParameters **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->virus_creation_mass_loss = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_contest16_jainl16JNI_GameParameters_1virus_1creation_1mass_1loss_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ainet16::GameParameters *arg1 = (ainet16::GameParameters *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::GameParameters **)&jarg1; 
  result = (float) ((arg1)->virus_creation_mass_loss);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_GameParameters_1virus_1max_1split_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ainet16::GameParameters *arg1 = (ainet16::GameParameters *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::GameParameters **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->virus_max_split = arg2;
}


SWIGEXPORT jint JNICALL Java_org_contest16_jainl16JNI_GameParameters_1virus_1max_1split_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ainet16::GameParameters *arg1 = (ainet16::GameParameters *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::GameParameters **)&jarg1; 
  result = (int) ((arg1)->virus_max_split);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_GameParameters_1nb_1starting_1cells_1per_1player_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ainet16::GameParameters *arg1 = (ainet16::GameParameters *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::GameParameters **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nb_starting_cells_per_player = arg2;
}


SWIGEXPORT jint JNICALL Java_org_contest16_jainl16JNI_GameParameters_1nb_1starting_1cells_1per_1player_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ainet16::GameParameters *arg1 = (ainet16::GameParameters *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::GameParameters **)&jarg1; 
  result = (int) ((arg1)->nb_starting_cells_per_player);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_GameParameters_1player_1cells_1starting_1mass_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ainet16::GameParameters *arg1 = (ainet16::GameParameters *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::GameParameters **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->player_cells_starting_mass = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_contest16_jainl16JNI_GameParameters_1player_1cells_1starting_1mass_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ainet16::GameParameters *arg1 = (ainet16::GameParameters *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::GameParameters **)&jarg1; 
  result = (float) ((arg1)->player_cells_starting_mass);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_GameParameters_1initial_1neutral_1cells_1mass_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ainet16::GameParameters *arg1 = (ainet16::GameParameters *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::GameParameters **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->initial_neutral_cells_mass = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_contest16_jainl16JNI_GameParameters_1initial_1neutral_1cells_1mass_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ainet16::GameParameters *arg1 = (ainet16::GameParameters *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::GameParameters **)&jarg1; 
  result = (float) ((arg1)->initial_neutral_cells_mass);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_GameParameters_1initial_1neutral_1cells_1repop_1time_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ainet16::GameParameters *arg1 = (ainet16::GameParameters *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::GameParameters **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->initial_neutral_cells_repop_time = arg2;
}


SWIGEXPORT jint JNICALL Java_org_contest16_jainl16JNI_GameParameters_1initial_1neutral_1cells_1repop_1time_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ainet16::GameParameters *arg1 = (ainet16::GameParameters *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::GameParameters **)&jarg1; 
  result = (int) ((arg1)->initial_neutral_cells_repop_time);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_GameParameters_1nb_1turns_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ainet16::GameParameters *arg1 = (ainet16::GameParameters *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::GameParameters **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nb_turns = arg2;
}


SWIGEXPORT jint JNICALL Java_org_contest16_jainl16JNI_GameParameters_1nb_1turns_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ainet16::GameParameters *arg1 = (ainet16::GameParameters *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::GameParameters **)&jarg1; 
  result = (int) ((arg1)->nb_turns);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_new_1GameParameters(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ainet16::GameParameters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ainet16::GameParameters *)new ainet16::GameParameters();
  *(ainet16::GameParameters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_delete_1GameParameters(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ainet16::GameParameters *arg1 = (ainet16::GameParameters *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ainet16::GameParameters **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_Welcome_1parameters_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ainet16::Welcome *arg1 = (ainet16::Welcome *) 0 ;
  ainet16::GameParameters *arg2 = (ainet16::GameParameters *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ainet16::Welcome **)&jarg1; 
  arg2 = *(ainet16::GameParameters **)&jarg2; 
  if (arg1) (arg1)->parameters = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_Welcome_1parameters_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ainet16::Welcome *arg1 = (ainet16::Welcome *) 0 ;
  ainet16::GameParameters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::Welcome **)&jarg1; 
  result = (ainet16::GameParameters *)& ((arg1)->parameters);
  *(ainet16::GameParameters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_Welcome_1initial_1ncells_1positions_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ainet16::Welcome *arg1 = (ainet16::Welcome *) 0 ;
  std::vector< ainet16::Position > *arg2 = (std::vector< ainet16::Position > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ainet16::Welcome **)&jarg1; 
  arg2 = *(std::vector< ainet16::Position > **)&jarg2; 
  if (arg1) (arg1)->initial_ncells_positions = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_Welcome_1initial_1ncells_1positions_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ainet16::Welcome *arg1 = (ainet16::Welcome *) 0 ;
  std::vector< ainet16::Position > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::Welcome **)&jarg1; 
  result = (std::vector< ainet16::Position > *)& ((arg1)->initial_ncells_positions);
  *(std::vector< ainet16::Position > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_new_1Welcome(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ainet16::Welcome *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ainet16::Welcome *)new ainet16::Welcome();
  *(ainet16::Welcome **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_delete_1Welcome(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ainet16::Welcome *arg1 = (ainet16::Welcome *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ainet16::Welcome **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_Virus_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ainet16::TurnVirus *arg1 = (ainet16::TurnVirus *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::TurnVirus **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT jint JNICALL Java_org_contest16_jainl16JNI_Virus_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ainet16::TurnVirus *arg1 = (ainet16::TurnVirus *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::TurnVirus **)&jarg1; 
  result = (int) ((arg1)->id);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_Virus_1position_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ainet16::TurnVirus *arg1 = (ainet16::TurnVirus *) 0 ;
  ainet16::Position *arg2 = (ainet16::Position *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ainet16::TurnVirus **)&jarg1; 
  arg2 = *(ainet16::Position **)&jarg2; 
  if (arg1) (arg1)->position = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_Virus_1position_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ainet16::TurnVirus *arg1 = (ainet16::TurnVirus *) 0 ;
  ainet16::Position *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::TurnVirus **)&jarg1; 
  result = (ainet16::Position *)& ((arg1)->position);
  *(ainet16::Position **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_new_1Virus(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ainet16::TurnVirus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ainet16::TurnVirus *)new ainet16::TurnVirus();
  *(ainet16::TurnVirus **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_delete_1Virus(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ainet16::TurnVirus *arg1 = (ainet16::TurnVirus *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ainet16::TurnVirus **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_PlayerCell_1pcell_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ainet16::TurnPlayerCell *arg1 = (ainet16::TurnPlayerCell *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::TurnPlayerCell **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->pcell_id = arg2;
}


SWIGEXPORT jint JNICALL Java_org_contest16_jainl16JNI_PlayerCell_1pcell_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ainet16::TurnPlayerCell *arg1 = (ainet16::TurnPlayerCell *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::TurnPlayerCell **)&jarg1; 
  result = (int) ((arg1)->pcell_id);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_PlayerCell_1player_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ainet16::TurnPlayerCell *arg1 = (ainet16::TurnPlayerCell *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::TurnPlayerCell **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->player_id = arg2;
}


SWIGEXPORT jint JNICALL Java_org_contest16_jainl16JNI_PlayerCell_1player_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ainet16::TurnPlayerCell *arg1 = (ainet16::TurnPlayerCell *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::TurnPlayerCell **)&jarg1; 
  result = (int) ((arg1)->player_id);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_PlayerCell_1position_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ainet16::TurnPlayerCell *arg1 = (ainet16::TurnPlayerCell *) 0 ;
  ainet16::Position *arg2 = (ainet16::Position *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ainet16::TurnPlayerCell **)&jarg1; 
  arg2 = *(ainet16::Position **)&jarg2; 
  if (arg1) (arg1)->position = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_PlayerCell_1position_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ainet16::TurnPlayerCell *arg1 = (ainet16::TurnPlayerCell *) 0 ;
  ainet16::Position *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::TurnPlayerCell **)&jarg1; 
  result = (ainet16::Position *)& ((arg1)->position);
  *(ainet16::Position **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_PlayerCell_1mass_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ainet16::TurnPlayerCell *arg1 = (ainet16::TurnPlayerCell *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::TurnPlayerCell **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->mass = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_contest16_jainl16JNI_PlayerCell_1mass_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ainet16::TurnPlayerCell *arg1 = (ainet16::TurnPlayerCell *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::TurnPlayerCell **)&jarg1; 
  result = (float) ((arg1)->mass);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_PlayerCell_1remaining_1isolated_1turns_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ainet16::TurnPlayerCell *arg1 = (ainet16::TurnPlayerCell *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::TurnPlayerCell **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->remaining_isolated_turns = arg2;
}


SWIGEXPORT jint JNICALL Java_org_contest16_jainl16JNI_PlayerCell_1remaining_1isolated_1turns_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ainet16::TurnPlayerCell *arg1 = (ainet16::TurnPlayerCell *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::TurnPlayerCell **)&jarg1; 
  result = (int) ((arg1)->remaining_isolated_turns);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_new_1PlayerCell(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ainet16::TurnPlayerCell *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ainet16::TurnPlayerCell *)new ainet16::TurnPlayerCell();
  *(ainet16::TurnPlayerCell **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_delete_1PlayerCell(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ainet16::TurnPlayerCell *arg1 = (ainet16::TurnPlayerCell *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ainet16::TurnPlayerCell **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_Player_1player_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ainet16::TurnPlayer *arg1 = (ainet16::TurnPlayer *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::TurnPlayer **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->player_id = arg2;
}


SWIGEXPORT jint JNICALL Java_org_contest16_jainl16JNI_Player_1player_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ainet16::TurnPlayer *arg1 = (ainet16::TurnPlayer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::TurnPlayer **)&jarg1; 
  result = (int) ((arg1)->player_id);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_Player_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ainet16::TurnPlayer *arg1 = (ainet16::TurnPlayer *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::TurnPlayer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_contest16_jainl16JNI_Player_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ainet16::TurnPlayer *arg1 = (ainet16::TurnPlayer *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::TurnPlayer **)&jarg1; 
  result = (std::string *) & ((arg1)->name);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_Player_1nb_1cells_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ainet16::TurnPlayer *arg1 = (ainet16::TurnPlayer *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::TurnPlayer **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nb_cells = arg2;
}


SWIGEXPORT jint JNICALL Java_org_contest16_jainl16JNI_Player_1nb_1cells_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ainet16::TurnPlayer *arg1 = (ainet16::TurnPlayer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::TurnPlayer **)&jarg1; 
  result = (int) ((arg1)->nb_cells);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_Player_1mass_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ainet16::TurnPlayer *arg1 = (ainet16::TurnPlayer *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::TurnPlayer **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->mass = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_contest16_jainl16JNI_Player_1mass_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ainet16::TurnPlayer *arg1 = (ainet16::TurnPlayer *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::TurnPlayer **)&jarg1; 
  result = (float) ((arg1)->mass);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_Player_1score_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  ainet16::TurnPlayer *arg1 = (ainet16::TurnPlayer *) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::TurnPlayer **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (uint64_t)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  if (arg1) (arg1)->score = arg2;
}


SWIGEXPORT jobject JNICALL Java_org_contest16_jainl16JNI_Player_1score_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  ainet16::TurnPlayer *arg1 = (ainet16::TurnPlayer *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::TurnPlayer **)&jarg1; 
  result = (uint64_t) ((arg1)->score);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_new_1Player(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ainet16::TurnPlayer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ainet16::TurnPlayer *)new ainet16::TurnPlayer();
  *(ainet16::TurnPlayer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_delete_1Player(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ainet16::TurnPlayer *arg1 = (ainet16::TurnPlayer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ainet16::TurnPlayer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_NeutralCell_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ainet16::NeutralCell *arg1 = (ainet16::NeutralCell *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::NeutralCell **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT jint JNICALL Java_org_contest16_jainl16JNI_NeutralCell_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ainet16::NeutralCell *arg1 = (ainet16::NeutralCell *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::NeutralCell **)&jarg1; 
  result = (int) ((arg1)->id);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_NeutralCell_1position_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ainet16::NeutralCell *arg1 = (ainet16::NeutralCell *) 0 ;
  ainet16::Position *arg2 = (ainet16::Position *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ainet16::NeutralCell **)&jarg1; 
  arg2 = *(ainet16::Position **)&jarg2; 
  if (arg1) (arg1)->position = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_NeutralCell_1position_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ainet16::NeutralCell *arg1 = (ainet16::NeutralCell *) 0 ;
  ainet16::Position *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::NeutralCell **)&jarg1; 
  result = (ainet16::Position *)& ((arg1)->position);
  *(ainet16::Position **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_NeutralCell_1mass_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ainet16::NeutralCell *arg1 = (ainet16::NeutralCell *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::NeutralCell **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->mass = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_contest16_jainl16JNI_NeutralCell_1mass_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ainet16::NeutralCell *arg1 = (ainet16::NeutralCell *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::NeutralCell **)&jarg1; 
  result = (float) ((arg1)->mass);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_NeutralCell_1is_1initial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ainet16::NeutralCell *arg1 = (ainet16::NeutralCell *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::NeutralCell **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->is_initial = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_contest16_jainl16JNI_NeutralCell_1is_1initial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ainet16::NeutralCell *arg1 = (ainet16::NeutralCell *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::NeutralCell **)&jarg1; 
  result = (bool) ((arg1)->is_initial);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_NeutralCell_1remaining_1turns_1before_1apparition_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ainet16::NeutralCell *arg1 = (ainet16::NeutralCell *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::NeutralCell **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->remaining_turns_before_apparition = arg2;
}


SWIGEXPORT jint JNICALL Java_org_contest16_jainl16JNI_NeutralCell_1remaining_1turns_1before_1apparition_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ainet16::NeutralCell *arg1 = (ainet16::NeutralCell *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::NeutralCell **)&jarg1; 
  result = (int) ((arg1)->remaining_turns_before_apparition);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_NeutralCell_1is_1alive_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ainet16::NeutralCell *arg1 = (ainet16::NeutralCell *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::NeutralCell **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->is_alive = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_contest16_jainl16JNI_NeutralCell_1is_1alive_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ainet16::NeutralCell *arg1 = (ainet16::NeutralCell *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::NeutralCell **)&jarg1; 
  result = (bool) ((arg1)->is_alive);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_new_1NeutralCell(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ainet16::NeutralCell *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ainet16::NeutralCell *)new ainet16::NeutralCell();
  *(ainet16::NeutralCell **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_delete_1NeutralCell(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ainet16::NeutralCell *arg1 = (ainet16::NeutralCell *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ainet16::NeutralCell **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_new_1Session(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ainet16::Session *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ainet16::Session *)new ainet16::Session();
  *(ainet16::Session **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_delete_1Session(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ainet16::Session *arg1 = (ainet16::Session *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ainet16::Session **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_Session_1connect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  ainet16::Session *arg1 = (ainet16::Session *) 0 ;
  std::string arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::Session **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  try {
    (arg1)->connect(arg2,arg3);
  }
  catch(ainet16::AINetException &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/RuntimeException");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_Session_1login_1player(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ainet16::Session *arg1 = (ainet16::Session *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::Session **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    (arg1)->login_player(arg2);
  }
  catch(ainet16::AINetException &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/RuntimeException");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_Session_1login_1visu(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ainet16::Session *arg1 = (ainet16::Session *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::Session **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    (arg1)->login_visu(arg2);
  }
  catch(ainet16::AINetException &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/RuntimeException");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_Session_1wait_1for_1welcome(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ainet16::Session *arg1 = (ainet16::Session *) 0 ;
  ainet16::Welcome result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::Session **)&jarg1; 
  try {
    result = (arg1)->wait_for_welcome();
  }
  catch(ainet16::AINetException &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/RuntimeException");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(ainet16::Welcome **)&jresult = new ainet16::Welcome((const ainet16::Welcome &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_contest16_jainl16JNI_Session_1wait_1for_1game_1starts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ainet16::Session *arg1 = (ainet16::Session *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::Session **)&jarg1; 
  try {
    result = (int)(arg1)->wait_for_game_starts();
  }
  catch(ainet16::AINetException &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/RuntimeException");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_Session_1wait_1for_1next_1turn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ainet16::Session *arg1 = (ainet16::Session *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::Session **)&jarg1; 
  try {
    (arg1)->wait_for_next_turn();
  }
  catch(ainet16::AINetException &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/RuntimeException");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_org_contest16_jainl16JNI_Session_1send_1actions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ainet16::Session *arg1 = (ainet16::Session *) 0 ;
  ainet16::Actions *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ainet16::Session **)&jarg1; 
  arg2 = *(ainet16::Actions **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ainet16::Actions const & reference is null");
    return ;
  } 
  try {
    (arg1)->send_actions((ainet16::Actions const &)*arg2);
  }
  catch(ainet16::AINetException &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/RuntimeException");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_Session_1welcome(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ainet16::Session *arg1 = (ainet16::Session *) 0 ;
  ainet16::Welcome result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::Session **)&jarg1; 
  result = ((ainet16::Session const *)arg1)->welcome();
  *(ainet16::Welcome **)&jresult = new ainet16::Welcome((const ainet16::Welcome &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_contest16_jainl16JNI_Session_1current_1turn_1number(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ainet16::Session *arg1 = (ainet16::Session *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::Session **)&jarg1; 
  result = (int)((ainet16::Session const *)arg1)->current_turn_number();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_contest16_jainl16JNI_Session_1player_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ainet16::Session *arg1 = (ainet16::Session *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::Session **)&jarg1; 
  result = (int)((ainet16::Session const *)arg1)->player_id();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_Session_1neutral_1cells(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ainet16::Session *arg1 = (ainet16::Session *) 0 ;
  std::vector< ainet16::NeutralCell > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::Session **)&jarg1; 
  result = ((ainet16::Session const *)arg1)->neutral_cells();
  *(std::vector< ainet16::NeutralCell > **)&jresult = new std::vector< ainet16::NeutralCell >((const std::vector< ainet16::NeutralCell > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_Session_1my_1player_1cells(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ainet16::Session *arg1 = (ainet16::Session *) 0 ;
  std::vector< ainet16::TurnPlayerCell > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::Session **)&jarg1; 
  result = ((ainet16::Session const *)arg1)->my_player_cells();
  *(std::vector< ainet16::TurnPlayerCell > **)&jresult = new std::vector< ainet16::TurnPlayerCell >((const std::vector< ainet16::TurnPlayerCell > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_Session_1ennemy_1player_1cells(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ainet16::Session *arg1 = (ainet16::Session *) 0 ;
  std::vector< ainet16::TurnPlayerCell > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::Session **)&jarg1; 
  result = ((ainet16::Session const *)arg1)->ennemy_player_cells();
  *(std::vector< ainet16::TurnPlayerCell > **)&jresult = new std::vector< ainet16::TurnPlayerCell >((const std::vector< ainet16::TurnPlayerCell > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_Session_1viruses(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ainet16::Session *arg1 = (ainet16::Session *) 0 ;
  std::vector< ainet16::TurnVirus > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::Session **)&jarg1; 
  result = ((ainet16::Session const *)arg1)->viruses();
  *(std::vector< ainet16::TurnVirus > **)&jresult = new std::vector< ainet16::TurnVirus >((const std::vector< ainet16::TurnVirus > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_contest16_jainl16JNI_Session_1is_1connected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ainet16::Session *arg1 = (ainet16::Session *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::Session **)&jarg1; 
  result = (bool)((ainet16::Session const *)arg1)->is_connected();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_contest16_jainl16JNI_Session_1is_1logged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ainet16::Session *arg1 = (ainet16::Session *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::Session **)&jarg1; 
  result = (bool)((ainet16::Session const *)arg1)->is_logged();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_contest16_jainl16JNI_Session_1is_1player(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ainet16::Session *arg1 = (ainet16::Session *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ainet16::Session **)&jarg1; 
  result = (bool)((ainet16::Session const *)arg1)->is_player();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_DisconnectedException_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ainet16::AINetException **)&baseptr = *(ainet16::DisconnectedException **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_KickException_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ainet16::AINetException **)&baseptr = *(ainet16::KickException **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_contest16_jainl16JNI_SocketErrorException_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ainet16::AINetException **)&baseptr = *(ainet16::SocketErrorException **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

